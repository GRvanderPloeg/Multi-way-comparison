---
title: "BMI_parafac"
output: html_document
date: "2025-02-21"
---

```{r setup}
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(stringr)
library(parafac4microbiome)
library(CMTFtoolbox)
```

```{r processing}
processedTongue = readRDS("./Data/TIFN/tongue.RDS")
processedLowling = readRDS("./Data/TIFN/lowling.RDS")
processedLowinter = readRDS("./Data/TIFN/lowinter.RDS")
processedUpling = readRDS("./Data/TIFN/upling.RDS")
processedUpinter = readRDS("./Data/TIFN/upinter.RDS")
processedSaliva = readRDS("./Data/TIFN/saliva.RDS")
processedMetabolomics = readRDS("./Data/TIFN/metabolomics.RDS")
```

```{r parafac of tongue}
# result = parafac4microbiome::assessModelQuality(processedTongue$data, numRepetitions=10, numCores=10)
# result$plots$overview
# result2 = parafac4microbiome::assessModelStability(processedTongue, maxNumComponents=3, numFolds=10, numCores=parallel::detectCores())
# result2$modelPlots[[2]]
# result2$modelPlots[[3]]
# modelTongue = parafac4microbiome::parafac(processedTongue$data, nfac=2, nstart=100)
# saveRDS(modelTongue, "./Models/PARAFAC/TIFN_tongue.RDS")
modelTongue = readRDS("./Models/PARAFAC/TIFN_tongue.RDS")
```

```{r parafac of lowling}
# result = parafac4microbiome::assessModelQuality(processedLowling$data, numRepetitions=10, numCores=10)
# result$plots$overview
# modelLowling = parafac4microbiome::parafac(processedLowling$data, nfac=1, nstart=100)
# saveRDS(modelLowling, "./Models/PARAFAC/TIFN_lowling.RDS")
modelLowling = readRDS("./Models/PARAFAC/TIFN_lowling.RDS")
```

```{r parafac of lowinter}
# result = parafac4microbiome::assessModelQuality(processedLowinter$data, numRepetitions=10, numCores=10)
# result$plots$overview
# modelLowinter = parafac4microbiome::parafac(processedLowinter$data, nfac=2, nstart=100)
# saveRDS(modelLowinter, "./Models/PARAFAC/TIFN_lowinter.RDS")
modelLowinter = readRDS("./Models/PARAFAC/TIFN_lowinter.RDS")
```

```{r parafac of upling}
# result = parafac4microbiome::assessModelQuality(processedUpling$data, numRepetitions=10, numCores=10)
# result$plots$overview
# modelUpling = parafac4microbiome::parafac(processedUpling$data, nfac=2, nstart=100)
# saveRDS(modelUpling, "./Models/PARAFAC/TIFN_upling.RDS")
modelUpling = readRDS("./Models/PARAFAC/TIFN_upling.RDS")
```

```{r parafac of upinter}
# result = parafac4microbiome::assessModelQuality(processedUpinter$data, numRepetitions=10, numCores=10)
# result$plots$overview
# result2 = parafac4microbiome::assessModelStability(processedUpinter, maxNumComponents=3, numFolds=10)
# result2$modelPlots[[2]]
# result2$modelPlots[[3]]
# result2$FMS <- this conclusively states 2 components

# modelUpinter = parafac4microbiome::parafac(processedUpinter$data, nfac=2, nstart=100)
# saveRDS(modelUpinter, "./Models/PARAFAC/TIFN_upinter.RDS")
modelUpinter = readRDS("./Models/PARAFAC/TIFN_upinter.RDS")
```

```{r parafac of saliva}
# result = parafac4microbiome::assessModelQuality(processedSaliva$data, numRepetitions=10, numCores=10)
# result$plots$overview
# modelSaliva = parafac4microbiome::parafac(processedSaliva$data, nfac=2, nstart=100)
# saveRDS(modelSaliva, "./Models/PARAFAC/TIFN_saliva.RDS")
modelSaliva = readRDS("./Models/PARAFAC/TIFN_saliva.RDS")
```

```{r parafac of metabolomics}
# result = parafac4microbiome::assessModelQuality(processedMetabolomics$data, numRepetitions=10, numCores=10)
# result$plots$overview
# 
# modelMetabolomics = parafac4microbiome::parafac(processedMetabolomics$data, nfac=1, nstart=100)
# saveRDS(modelMetabolomics, "./Models/PARAFAC/TIFN_metabolomics.RDS")
modelMetabolomics = readRDS("./Models/PARAFAC/TIFN_metabolomics.RDS")
```

```{r Import red fluorescence data}
rf_data = read.csv("./Data/TIFN/RFdata.csv")
colnames(rf_data) = c("subject", "id", "fotonr", "day", "group", "RFgroup", "MQH", "SPS(tm)", "Area_delta_R30", "Area_delta_Rmax", "Area_delta_R30_x_Rmax", "gingiva_mean_R_over_G", "gingiva_mean_R_over_G_upper_jaw", "gingiva_mean_R_over_G_lower_jaw")
rf_data = rf_data %>% as_tibble()

rf_data[rf_data$subject == "VSTPHZ", 1] = "VSTPH2"
rf_data[rf_data$subject == "D2VZH0", 1] = "DZVZH0"
rf_data[rf_data$subject == "DLODNN", 1] = "DLODDN"
rf_data[rf_data$subject == "O3VQFX", 1] = "O3VQFQ"
rf_data[rf_data$subject == "F80LGT", 1] = "F80LGF"
rf_data[rf_data$subject == "26QQR0", 1] = "26QQrO"

rf_data2 = read.csv("./Data/TIFN/red_fluorescence_data.csv") %>% as_tibble()
rf_data2 = rf_data2[,c(2,4,181:192)]
rf_data = rf_data %>% left_join(rf_data2)

rf = rf_data %>% select(subject, RFgroup) %>% unique()
```

```{r Import subject metadata}
age_gender = read.csv("./Data/TIFN/Ploeg_subjectMetadata.csv", sep=";")
age_gender = age_gender[2:nrow(age_gender),2:ncol(age_gender)]
age_gender = age_gender %>% as_tibble() %>% filter(onderzoeksgroep == 0) %>% select(naam, leeftijd, geslacht)
colnames(age_gender) = c("subject", "age", "gender")

# Correction for incorrect subject ids
age_gender[age_gender$subject == "VSTPHZ", 1] = "VSTPH2"
age_gender[age_gender$subject == "D2VZH0", 1] = "DZVZH0"
age_gender[age_gender$subject == "DLODNN", 1] = "DLODDN"
age_gender[age_gender$subject == "O3VQFX", 1] = "O3VQFQ"
age_gender[age_gender$subject == "F80LGT", 1] = "F80LGF"
age_gender[age_gender$subject == "26QQR0", 1] = "26QQrO"

age_gender = age_gender %>% arrange(subject)
```

```{r test metadata tongue}
model = modelTongue
obj = processedTongue

normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(model$Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))

uncorrectedP = matrix(0L, nrow=2, ncol=5)

# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value

# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value

# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value

# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)

uncorrectedP[1,4] = t.test(partA$`1`, partB$`1`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value

# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`1`, temp$age, method="pearson")$p.value
uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value

correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=2, ncol=5)
correctedP
```

```{r test metadata lowling}
model = modelLowling
obj = processedLowling

normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(model$Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))

uncorrectedP = matrix(0L, nrow=1, ncol=5)

# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
# uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value

# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
# uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value

# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
# uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value

# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)

uncorrectedP[1,4] = t.test(partA$`model$Fac[[1]]`, partB$`model$Fac[[1]]`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
# uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value

# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`model$Fac[[1]]`, temp$age, method="pearson")$p.value
# uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value

correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=5)
correctedP
```
```{r test metadata lowinter}
model = modelLowinter
obj = processedLowinter

normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(model$Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))

uncorrectedP = matrix(0L, nrow=2, ncol=5)

# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value

# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value

# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value

# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)

uncorrectedP[1,4] = t.test(partA$`1`, partB$`1`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value

# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`1`, temp$age, method="pearson")$p.value
uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value

correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=2, ncol=5)
correctedP
```

```{r test metadata upling}
model = modelUpling
obj = processedUpling

normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(model$Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))

uncorrectedP = matrix(0L, nrow=2, ncol=5)

# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value

# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value

# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value

# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)

uncorrectedP[1,4] = t.test(partA$`1`, partB$`1`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value

# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`1`, temp$age, method="pearson")$p.value
uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value

correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=2, ncol=5)
correctedP
```

```{r test metadata upinter}
model = modelUpinter
obj = processedUpinter

normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(model$Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))

uncorrectedP = matrix(0L, nrow=2, ncol=5)

# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value

# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value

# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value

# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)

uncorrectedP[1,4] = t.test(partA$`1`, partB$`1`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value

# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`1`, temp$age, method="pearson")$p.value
uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value

correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=2, ncol=5)
correctedP
```

```{r test metadata saliva}
model = modelSaliva
obj = processedSaliva

normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(model$Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))

uncorrectedP = matrix(0L, nrow=2, ncol=5)

# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value

# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value

# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value

# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)

uncorrectedP[1,4] = t.test(partA$`1`, partB$`1`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value

# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`1`, temp$age, method="pearson")$p.value
uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value

correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=2, ncol=5)
correctedP
```

```{r test metadata metabolomics}
model = modelMetabolomics
obj = processedMetabolomics

normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(model$Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=5), day = rep(c(0,2,5,9,14),40))

uncorrectedP = matrix(0L, nrow=1, ncol=5)

# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
# uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value

# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
# uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value

# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
# uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value

# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)

uncorrectedP[1,4] = t.test(partA$`model$Fac[[1]]`, partB$`model$Fac[[1]]`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
# uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value

# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`model$Fac[[1]]`, temp$age, method="pearson")$p.value
# uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value

correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=5)
correctedP
```
