---
title: "BMI_parafac"
output: html_document
date: "2025-02-21"
---

```{r setup}
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(stringr)
library(parafac4microbiome)
library(CMTFtoolbox)
```

```{r processing}
milkMetab_df_bmi = readRDS("./Data/BMI/milkMetab.RDS")
milk_df_bmi = readRDS("./Data/BMI/milk.RDS")
faeces_df_bmi = readRDS("./Data/BMI/faeces.RDS")
homogenized_subjectMeta_bmi = readRDS("./Data/BMI/homogenized_subjectMeta.RDS")
faeces_taxonomy = readRDS("./Data/BMI/faeces_taxonomy.RDS")
milk_taxonomy = readRDS("./Data/BMI/milk_taxonomy.RDS")
milkMetab_featureMeta = readRDS("./Data/BMI/milk_metabolites.RDS")
```

```{r parafac of HM metabolomics}
# result = parafac4microbiome::assessModelQuality(milkMetab_df_bmi, numRepetitions=10, numCores=parallel::detectCores())
# result = parafac4microbiome::assessModelStability(milkMetab_df_bmi, numFolds=10, numCores=parallel::detectCores())
# milkMetab_parafac = parafac4microbiome::parafac(milkMetab_df_bmi, nfac=1, nstart=100)
# saveRDS(milkMetab_parafac, "./Models/PARAFAC/BMI_milkMetab.RDS")
milkMetab_parafac = readRDS("./Models/PARAFAC/BMI_milkMetab.RDS")
```

```{r parafac of HM microbiome}
# result = parafac4microbiome::assessModelQuality(milk_df_bmi, numRepetitions=10, numCores=parallel::detectCores())
# milk_parafac = parafac4microbiome::parafac(milk_df_bmi, nfac=1, nstart=100)
# saveRDS(milk_parafac, "./Models/PARAFAC/BMI_milk.RDS")
milk_parafac = readRDS("./Models/PARAFAC/BMI_milk.RDS")
```

```{r parafac of infant faecal microbiome}
# result = parafac4microbiome::assessModelQuality(faeces_df_bmi, numRepetitions=10, numCores=parallel::detectCores())
# result = parafac4microbiome::assessModelQuality(faeces_df_bmi, numRepetitions=10, numCores=parallel::detectCores())
# faeces_parafac = parafac4microbiome::parafac(faeces_df_bmi, nfac=1, nstart=100)
# saveRDS(faeces_parafac, "./Models/PARAFAC/BMI_faeces.RDS")
faeces_parafac = readRDS("./Models/PARAFAC/BMI_faeces.RDS")
```

```{r plot HM metabolomics model}
prepMode1 = homogenized_subjectMeta_bmi %>% mutate(Component_1 = milkMetab_parafac$Fac[[1]]) %>% arrange(Secretor,subject) %>% mutate(index=1:nrow(.))
prepMode2 = milkMetab_featureMeta %>% mutate(Component_1 = milkMetab_parafac$Fac[[2]]) %>% arrange(Class, Metabolite) %>% mutate(index=1:nrow(.))

a = prepMode1 %>% ggplot(aes(x=index,y=Component_1,fill=as.factor(Secretor))) + geom_bar(stat="identity")
b = prepMode2 %>% ggplot(aes(x=index,y=Component_1,fill=as.factor(Class))) + geom_bar(stat="identity")
c = milkMetab_parafac$Fac[[3]] %>% as_tibble() %>% mutate(timepoint = c(3,30,60,90)) %>% ggplot(aes(x=timepoint,y=V1)) + geom_line() + geom_point()

ggarrange(a,b,c,nrow=1,ncol=3)
```

```{r plot HM microbiome model}
prepMode1 = homogenized_subjectMeta_bmi %>% mutate(Component_1 = milk_parafac$Fac[[1]]) %>% arrange(BMI.group,subject) %>% mutate(index=1:nrow(.))
prepMode2 = milk_taxonomy %>% mutate(Component_1 = milk_parafac$Fac[[2]]) %>% arrange(V3, V1) %>% mutate(index=1:nrow(.))

a = prepMode1 %>% ggplot(aes(x=index,y=Component_1,fill=as.factor(BMI.group))) + geom_bar(stat="identity")
b = prepMode2 %>% ggplot(aes(x=index,y=Component_1,fill=as.factor(V3))) + geom_bar(stat="identity")
c = milk_parafac$Fac[[3]] %>% as_tibble() %>% mutate(timepoint = c(3,30,60,90)) %>% ggplot(aes(x=timepoint,y=V1)) + geom_line() + geom_point()

ggarrange(a,b,c,nrow=1,ncol=3)
```
```{r plot faecal microbiome model}
prepMode1 = homogenized_subjectMeta_bmi %>% mutate(Component_1 = faeces_parafac$Fac[[1]]) %>% arrange(BMI.group,subject) %>% mutate(index=1:nrow(.))
prepMode2 = faeces_taxonomy %>% mutate(Component_1 = faeces_parafac$Fac[[2]]) %>% arrange(V3, V1) %>% mutate(index=1:nrow(.))

a = prepMode1 %>% ggplot(aes(x=index,y=Component_1,fill=as.factor(BMI.group))) + geom_bar(stat="identity")
b = prepMode2 %>% ggplot(aes(x=index,y=Component_1,fill=as.factor(V3))) + geom_bar(stat="identity")
c = faeces_parafac$Fac[[3]] %>% as_tibble() %>% mutate(timepoint = c(30,60,90)) %>% ggplot(aes(x=timepoint,y=V1)) + geom_line() + geom_point()

ggarrange(a,b,c,nrow=1,ncol=3)
```

```{r interpret loadings}
testAssociationsPerComponent = function(model){
  numComponents = ncol(model$Fac[[1]])
  
  result = matrix(NA, nrow=numComponents, ncol=5)
  
  for(i in 1:numComponents){
    result[i,1] = cor.test(model$Fac[[1]][,i], Jakobsen2025$subjectMeta_BMI$BMI, method="spearman")$p.value
    result[i,2] = cor.test(model$Fac[[1]][,i], Jakobsen2025$subjectMeta_BMI$whz.6m, method="spearman")$p.value
    
    mask = !is.na(Jakobsen2025$subjectMeta_BMI$C.section)
    temp = model$Fac[[1]][mask,i]
    tempMeta = Jakobsen2025$subjectMeta_BMI[mask,]
    mask1 = tempMeta$C.section == 1
    mask2 = tempMeta$C.section == 2
    
    result[i,3] = wilcox.test(temp[mask1], temp[mask2])$p.value
    
    mask1 = Jakobsen2025$subjectMeta_BMI$Secretor == 0
    mask2 = Jakobsen2025$subjectMeta_BMI$Secretor == 1
    result[i,4] = wilcox.test(model$Fac[[1]][mask1,i], model$Fac[[1]][mask2,i])$p.value
    
    mask1 = Jakobsen2025$subjectMeta_BMI$Lewis == 0
    mask2 = Jakobsen2025$subjectMeta_BMI$Lewis == 1
    result[i,5] = wilcox.test(model$Fac[[1]][mask1,i], model$Fac[[1]][mask2,i])$p.value
  }
  
  return(result)
}

result1 = testAssociationsPerComponent(faeces_parafac)
result2 = testAssociationsPerComponent(milk_parafac)
result3 = testAssociationsPerComponent(milkMetab_parafac)

df = rbind(result1, result2, result3)
corrected_df = signif(matrix(p.adjust(df, "BH"), dim(df)), 2)
```
