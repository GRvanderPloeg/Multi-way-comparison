---
title: "AP_ACMTF"
output: html_document
date: "2025-02-21"
---

```{r libraries}
library(phyloseq)
library(tidyverse)
library(vegan)
library(ape)
library(ggpubr)
library(ggplot2)
library(parafac4microbiome)
library(CMTFtoolbox)
```

```{r load the data}
cytokines_data = read.csv("./Data/AP/input_deduplicated_RvdP.csv", sep=" ", header=FALSE) %>% as_tibble()
colnames(cytokines_data) = c("VEGF", "CRP", "GM-CSF", "IL1alpha", "IL1beta", "IL4", "IL6", "IL8", "IL10", "IL12p70", "IL17A", "IFNgamma", "MIP1alpha", "OPG", "TNFalpha", "RANKL")

cytokines_meta_data = read.csv("./Data/AP/input_deduplicated_metadata_RvdP.csv", sep=" ", header=FALSE) %>% as_tibble()
colnames(cytokines_meta_data) = c("SubjectID", "Visit", "Gender", "Age", "Pain_noPain", "case_control")

otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
```

```{r put into a cube for processing}
I = 52
J = 16
K = 6
cube = array(0L, dim=c(I,J,K))

for(k in 1:K){
  temp = cbind(cytokines_data, cytokines_meta_data) %>% as_tibble()
  cube[,,k] = temp %>%
    filter(Visit == k) %>%
    right_join(cytokines_meta_data %>% select(SubjectID) %>% unique()) %>%
    arrange(SubjectID) %>%
    select(-all_of(colnames(cytokines_meta_data))) %>%
    as.matrix()
}

cube = log(cube+0.0050)

temp = cytokines_meta_data %>% select(-Visit) %>% unique() %>% arrange(SubjectID)
caseMask = temp$case_control=="case"

processedGeorgiou = list()
processedGeorgiou$mode1 = temp[caseMask,] %>% left_join(otherMeta %>% select(SubjectID, PainS_NopainA) %>% unique())
processedGeorgiou$mode2 = colnames(cytokines_data) %>% as_tibble()
processedGeorgiou$mode3 = cytokines_meta_data %>% select(Visit) %>% arrange(Visit) %>% unique() %>% mutate(extraction = c(rep("Before extraction",3), rep("After extraction",3)))

processedGeorgiou$data = cube[caseMask,,]

remove = c("A11-18", "A11-3")
mask2 = !(processedGeorgiou$mode1$SubjectID %in% remove)
processedGeorgiou$data = processedGeorgiou$data[mask2,,]
processedGeorgiou$mode1 = processedGeorgiou$mode1[mask2,]

processedGeorgiou$data = multiwayCenter(processedGeorgiou$data, mode=1)
processedGeorgiou$data = multiwayScale(processedGeorgiou$data, mode=2)

cytokines_cnt_scl = processedGeorgiou$data
```

```{r load phyloseq object and convert}
microbiome_raw = read.csv("./Data/AP/20240429_microbiome_counts.csv", sep=" ", header=FALSE)
taxonomy = read.csv("./Data/AP/20240429_taxonomy.csv", sep=" ", header=FALSE)
subjectMeta2 = read.csv("./Data/AP/20240429_microbiome_sampleMeta.csv", sep=" ", header=FALSE)

remove = c("A11-18", "A11-3", "A11-8 36", "A11-10 17", "A11-15 17")
mask = !(subjectMeta2[,3] %in% remove)

microbiome_raw = microbiome_raw[mask,]
subjectMeta2 = subjectMeta2[mask,]

# Select ASVs based on sparsity per group
sparsityThreshold = 0.5

maskA = subjectMeta2[,4] == "A"
maskS = subjectMeta2[,4] == "S"

microbiomeA = microbiome_raw[maskA,]
microbiomeS = microbiome_raw[maskS,]

sparsityA = colSums(microbiomeA==0) / nrow(microbiomeA)
sparsityS = colSums(microbiomeS==0) / nrow(microbiomeS)

featureMask = (sparsityA <= sparsityThreshold) | (sparsityS <= sparsityThreshold)

# CLR transformation
geomeans = pracma::geomean(as.matrix(microbiome_raw+1), dim=2)
microbiome_clr = log(sweep(microbiome_raw+1, 1, geomeans, FUN="/"))

# Reduce to previously selected ASVs
microbiome_selected = microbiome_clr[,featureMask]
taxonomy_selected = taxonomy[featureMask,]

# Center and scale
microbiome_cnt = sweep(microbiome_selected, 2, colMeans(microbiome_selected), FUN="-")
microbiome_cnt_scl = sweep(microbiome_cnt, 2, apply(microbiome_cnt, 2, sd), FUN="/")
```

```{r homogenize datasets}
# 
# mask = !(sampleMeta_reordered$subject %in% remove)
# 
# microbiome_homogenized = df_reordered[mask,] %>% as.matrix()
# sampleMeta_homogenized = sampleMeta_reordered[mask,]
# 
# mask2 = processedGeorgiou$mode1$SubjectID %in% sampleMeta_homogenized$subjectID
# 
# cytokines_homogenized = processedGeorgiou$data[mask2,,]
```

```{r prepare input data}
datasets = list(cytokines_cnt_scl, as.matrix(microbiome_cnt_scl))
modes = list(c(1,2,3), c(1,4))
Z = setupCMTFdata(datasets, modes, normalize=TRUE)
```

```{r check number of components}
result = investigateFMS(datasets, modes, sharedMode=1, maxNumComponents=5, numFolds=10, numCores = parallel::detectCores(), method="L-BFGS")
```

```{r run ACMTF}
model = acmtf_opt(Z, 1, method="L-BFGS", nstart=100, numCores=parallel::detectCores())
```

```{r plot acmtf model}
a = processedGeorgiou$mode1 %>% mutate(Component_1 = model$Fac[[1]][,1]) %>% arrange(PainS_NopainA,SubjectID) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=Component_1,fill=as.factor(PainS_NopainA))) + geom_bar(stat="identity")
```

```{r tests}
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)

normalSubjectLoadings = processedGeorgiou$mode1 %>% mutate(Component_1 = model$Fac[[1]][,1]) %>% as_tibble() %>% left_join(otherMeta)

uncorrectedP = matrix(NA, nrow=1, ncol=4)

# Gender
uncorrectedP[1,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_2) %>% pull())$p.value

# Age
uncorrectedP[1,2] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$Age)$p.value
# uncorrectedP[2,2] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$Age)$p.value

# DMFT
uncorrectedP[1,3] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$DMFT)$p.value
# uncorrectedP[2,3] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$DMFT)$p.value

# pain-noPain
uncorrectedP[1,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA=="S") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA=="A") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA=="S") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA=="A") %>% select(Component_2) %>% pull())$p.value

print(uncorrectedP)
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=4)
print(correctedP)

```
