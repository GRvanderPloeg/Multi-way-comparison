uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
# uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value
# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
# uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value
# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)
uncorrectedP[1,4] = t.test(partA$`model$Fac[[1]]`, partB$`model$Fac[[1]]`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
# uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value
# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`model$Fac[[1]]`, temp$age, method="pearson")$p.value
# uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=5)
correctedP
model = modelLowling
obj = processedLowling
Fac = model$Fac
normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))
uncorrectedP = matrix(0L, nrow=1, ncol=5)
# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
# uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value
# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
# uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value
# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
# uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value
# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)
uncorrectedP[1,4] = t.test(partA$`model$Fac[[1]]`, partB$`model$Fac[[1]]`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
# uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value
# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`model$Fac[[1]]`, temp$age, method="pearson")$p.value
# uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=5)
correctedP
modelLowling$varExpX
modelLowling$varExpY
model = modelLowinter
obj = processedLowinter
Fac = model$Fac
normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))
uncorrectedP = matrix(0L, nrow=1, ncol=5)
# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
# uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value
# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
# uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value
# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
# uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value
# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)
uncorrectedP[1,4] = t.test(partA$`model$Fac[[1]]`, partB$`model$Fac[[1]]`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
# uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value
# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`model$Fac[[1]]`, temp$age, method="pearson")$p.value
# uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=5)
correctedP
modelLowinter$varExpX
modelLowinter$varExpY
model = modelUpling
obj = processedUpling
Fac = model$Fac
normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))
uncorrectedP = matrix(0L, nrow=1, ncol=5)
# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
# uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value
# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
# uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value
# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
# uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value
# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)
uncorrectedP[1,4] = t.test(partA$`model$Fac[[1]]`, partB$`model$Fac[[1]]`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
# uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value
# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`model$Fac[[1]]`, temp$age, method="pearson")$p.value
# uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=5)
correctedP
modelUpling$varExpX
modelUpling$varExpY
model = modelUpinter
obj = processedUpinter
Fac = model$Fac
normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))
uncorrectedP = matrix(0L, nrow=1, ncol=5)
# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
# uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value
# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
# uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value
# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
# uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value
# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)
uncorrectedP[1,4] = t.test(partA$`model$Fac[[1]]`, partB$`model$Fac[[1]]`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
# uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value
# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`model$Fac[[1]]`, temp$age, method="pearson")$p.value
# uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=5)
correctedP
modelUpinter$varExpX
modelUpinter$varExpY
model = modelSaliva
obj = processedSaliva
Fac = model$Fac
normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))
uncorrectedP = matrix(0L, nrow=1, ncol=5)
# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
# uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value
# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
# uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value
# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
# uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value
# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)
uncorrectedP[1,4] = t.test(partA$`model$Fac[[1]]`, partB$`model$Fac[[1]]`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
# uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value
# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`model$Fac[[1]]`, temp$age, method="pearson")$p.value
# uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=5)
correctedP
model = modelSaliva
obj = processedSaliva
Fac = model$Fac
normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))
uncorrectedP = matrix(0L, nrow=1, ncol=5)
# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
# uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value
# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
# uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value
# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
# uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value
# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)
uncorrectedP[1,4] = t.test(partA$`model$Fac[[1]]`, partB$`model$Fac[[1]]`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
# uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value
# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`model$Fac[[1]]`, temp$age, method="pearson")$p.value
# uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=5)
correctedP
modelSaliva$varExpX
modelSaliva$varExpY
model = modelMetabolomics
obj = processedMetabolomics
Fac = model$Fac
normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=5), day = rep(c(0,2,5,9,14),40))
uncorrectedP = matrix(0L, nrow=1, ncol=5)
# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
# uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value
# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
# uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value
# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
# uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value
# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)
uncorrectedP[1,4] = t.test(partA$`model$Fac[[1]]`, partB$`model$Fac[[1]]`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
# uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value
# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`model$Fac[[1]]`, temp$age, method="pearson")$p.value
# uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=5)
correctedP
modelMetabolomics$varExpX
modelMetabolomics$varExpY
library(ggplot2)
library(parafac4microbiome)
processedGeorgiou = readRDS("./Data/AP/cytokines_processed.RDS")
mode1 = read.csv("./Models/NPLS/AP/AP_mode1.csv", header=FALSE)
library(ggplot2)
library(parafac4microbiome)
processedGeorgiou = readRDS("./Data/AP/cytokines_processed.RDS")
Y = as.numeric(as.factor(processedGeorgiou$mode1$PainS_NopainA))
Ycnt = Y - mean(Y)
result = NPLStoolbox::ncrossreg(processedGeorgiou$data, Ycnt)
Ycnt
processedGeorgiou = readRDS("./Data/AP/cytokines_processed.RDS")
processedGeorgiou
processedGeorgiou$mode1
processedGeorgiou
library(ggplot2)
library(parafac4microbiome)
processedGeorgiou = readRDS("./Data/AP/cytokines_processed.RDS")
processedGeorgiou$data
processedGeorgiou$mode1
Y = as.numeric(as.factor(processedGeorgiou$mode1$PainS_NopainA))
Ycnt = Y - mean(Y)
Ycnt
processedGeorgiou$mode1$PainS_NopainA
Y = as.numeric(as.factor(processedGeorgiou$mode1$case_control))
Ycnt = Y - mean(Y)
Ycnt
result = NPLStoolbox::ncrossreg(processedGeorgiou$data, Ycnt)
result
model = NPLStoolbox::triPLS1(processedGeorgiou$data, Ycnt, 1)
saveRDS(model, "./Models/NPLS/AP_cytokine_NPLS.RDS")
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)
normalSubjectLoadings = prepMode1 %>% as_tibble() %>% left_join(cytokines_meta_data) %>% left_join(otherMeta,by="SubjectID")
cbind(model$Fac[[1]], processedGeorgiou$mode1)
cbind(model$Fac[[1]], processedGeorgiou$mode1)%>% as_tibble()
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)
normalSubjectLoadings = cbind(model$Fac[[1]], processedGeorgiou$mode1)%>% as_tibble() %>% left_join(cytokines_meta_data) %>% left_join(otherMeta,by="SubjectID")
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)
normalSubjectLoadings = cbind(model$Fac[[1]], processedGeorgiou$mode1)%>% as_tibble() %>% left_join(otherMeta,by="SubjectID")
uncorrectedP = matrix(NA, nrow=1, ncol=4)
# Gender
uncorrectedP[1,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_1) %>% pull())$p.value
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)
normalSubjectLoadings = processedGeorgiou$mode1 %>% mutate(Component_1 = model$Fac[[1]][,1]) %>% left_join(otherMeta,by="SubjectID")
uncorrectedP = matrix(NA, nrow=1, ncol=4)
# Gender
uncorrectedP[1,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_2) %>% pull())$p.value
# Age
uncorrectedP[1,2] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$Age.x)$p.value
# uncorrectedP[2,2] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$Age)$p.value
# DMFT
uncorrectedP[1,3] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$DMFT)$p.value
# uncorrectedP[2,3] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$DMFT)$p.value
# pain-noPain
uncorrectedP[1,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA.x=="Symptomatic") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA.x=="Asymptomatic") %>% select(Component_1) %>% pull())$p.value
normalSubjectLoadings %>% filter(PainS_NopainA.x=="Symptomatic")
normalSubjectLoadings %>% filter(PainS_NopainA.x=="S")
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)
normalSubjectLoadings = processedGeorgiou$mode1 %>% mutate(Component_1 = model$Fac[[1]][,1]) %>% left_join(otherMeta,by="SubjectID")
uncorrectedP = matrix(NA, nrow=1, ncol=4)
# Gender
uncorrectedP[1,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_2) %>% pull())$p.value
# Age
uncorrectedP[1,2] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$Age.x)$p.value
# uncorrectedP[2,2] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$Age)$p.value
# DMFT
uncorrectedP[1,3] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$DMFT)$p.value
# uncorrectedP[2,3] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$DMFT)$p.value
# pain-noPain
uncorrectedP[1,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA.x=="S") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA.x=="A") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA=="S") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA=="A") %>% select(Component_2) %>% pull())$p.value
print(uncorrectedP)
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=4)
print(correctedP)
model$varExpX
model$varExpY
normalSubjectLoadings$case_control
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)
normalSubjectLoadings = processedGeorgiou$mode1 %>% mutate(Component_1 = model$Fac[[1]][,1]) %>% left_join(otherMeta,by="SubjectID")
uncorrectedP = matrix(NA, nrow=1, ncol=5)
# Gender
uncorrectedP[1,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_2) %>% pull())$p.value
# Age
uncorrectedP[1,2] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$Age.x)$p.value
# uncorrectedP[2,2] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$Age)$p.value
# DMFT
uncorrectedP[1,3] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$DMFT)$p.value
# uncorrectedP[2,3] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$DMFT)$p.value
# pain-noPain
uncorrectedP[1,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA.x=="S") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA.x=="A") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA=="S") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA=="A") %>% select(Component_2) %>% pull())$p.value
# Case/control
uncorrectedP[1,5] = wilcox.test(normalSubjectLoadings %>% filter(case_control=="case") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(case_control=="control") %>% select(Component_1) %>% pull())$p.value
print(uncorrectedP)
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=4)
print(correctedP)
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)
normalSubjectLoadings = processedGeorgiou$mode1 %>% mutate(Component_1 = model$Fac[[1]][,1]) %>% left_join(otherMeta,by="SubjectID")
uncorrectedP = matrix(NA, nrow=1, ncol=5)
# Gender
uncorrectedP[1,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_2) %>% pull())$p.value
# Age
uncorrectedP[1,2] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$Age.x)$p.value
# uncorrectedP[2,2] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$Age)$p.value
# DMFT
uncorrectedP[1,3] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$DMFT)$p.value
# uncorrectedP[2,3] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$DMFT)$p.value
# pain-noPain
uncorrectedP[1,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA.x=="S") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA.x=="A") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA=="S") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA=="A") %>% select(Component_2) %>% pull())$p.value
# Case/control
uncorrectedP[1,5] = wilcox.test(normalSubjectLoadings %>% filter(case_control=="case") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(case_control=="control") %>% select(Component_1) %>% pull())$p.value
print(uncorrectedP)
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=5)
print(correctedP)
library(tidyverse)
library(vegan)
library(ggpubr)
library(ape)
library(Polychrome)
library(parafac4microbiome)
processedTongue = readRDS("./Data/GOHTRANS/tongue.RDS")
processedSaliva = readRDS("./Data/GOHTRANS/saliva.RDS")
processedCytokine = readRDS("./Data/GOHTRANS/cytokine.RDS")
sampleMeta = read.csv("./Data/GOHTRANS/sampleInfo_fixed.csv", sep=" ") %>% as_tibble()
salivaSampleMeta = sampleMeta[sampleMeta$Niche == "Saliva",]
# Load other metadata and ph
ph_BOMP = read_delim("Data/GOHTRANS/GOH-TRANS_csv_export_20240205114955/GOH-TRANS_export_20240205.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>% as_tibble()
df1 = ph_BOMP %>% select(`Participant Id`, starts_with("5.")) %>% mutate(subject = 1:42, numTeeth = `5.1|Number of teeth`, DMFT = `5.2|DMFT`, numBleedingSites = `5.3|Bleeding sites`, boppercent = `5.4|BOP%`, DPSI = `5.5|DPSI`, pH = `5.8|pH`) %>% select(subject, numTeeth, DMFT, numBleedingSites, boppercent, DPSI, pH)
df2 = ph_BOMP %>% select(`Participant Id`, starts_with("12.")) %>% mutate(subject = 1:42, numTeeth = `12.1|Number of teeth`, DMFT = `12.2|DMFT`, numBleedingSites = `12.3|Bleeding sites`, boppercent = `12.4|BOP%`, DPSI = `12.5|DPSI`, pH = `12.8|pH`) %>% select(subject, numTeeth, DMFT, numBleedingSites, boppercent, DPSI, pH)
df3 = ph_BOMP %>% select(`Participant Id`, starts_with("19.")) %>% mutate(subject = 1:42, numTeeth = `19.1|Number of teeth`, DMFT = `19.2|DMFT`, numBleedingSites = `19.3|Bleeding sites`, boppercent = `19.4|BOP%`, DPSI = `19.5|DPSI`, pH = `19.8|pH`) %>% select(subject, numTeeth, DMFT, numBleedingSites, boppercent, DPSI, pH)
df4 = ph_BOMP %>% select(`Participant Id`, starts_with("26.")) %>% mutate(subject = 1:42, numTeeth = `26.1|Number of teeth`, DMFT = `26.2|DMFT`, numBleedingSites = `26.3|Bleeding sites`, boppercent = `26.4|BOP%`, DPSI = `26.5|DPSI`, pH = `26.8|pH`) %>% select(subject, numTeeth, DMFT, numBleedingSites, boppercent, DPSI, pH)
otherMeta = rbind(df1, df2, df3, df4) %>% as_tibble() %>% mutate(newTimepoint = rep(c(0,3,6,12), each=42))
# Remove pH measurements of lower than 0
otherMeta = otherMeta[!otherMeta$pH < 1,] %>% as_tibble()
# result = assessModelQuality(processedTongue$data, numRepetitions=10, numCores=parallel::detectCores())
# result$plots$overview
# result2 = assessModelStability(processedTongue, maxNumComponents = 3, numFolds=10)
# modelTongue = parafac4microbiome::parafac(processedTongue$data, nfac=2, nstart=100)
# saveRDS(modelTongue, "./Models/PARAFAC/GOHTRANS_tongue_PARAFAC.RDS")
modelTongue = readRDS("./Models/PARAFAC/GOHTRANS_tongue_PARAFAC.RDS")
# result = assessModelQuality(processedSaliva$data, numRepetitions=10, numCores=parallel::detectCores())
# result$plots$overview
# modelSaliva = parafac4microbiome::parafac(processedSaliva$data, nfac=2, nstart=100)
# saveRDS(modelSaliva, "./Models/PARAFAC/GOHTRANS_saliva_PARAFAC.RDS")
modelSaliva = readRDS("./Models/PARAFAC/GOHTRANS_saliva_PARAFAC.RDS")
# result = assessModelQuality(processedCytokine$data, numRepetitions=10, numCores=parallel::detectCores())
# result$plots$overview
# result2 = assessModelStability(processedCytokine, maxNumComponents = 3, numFolds=10)
# modelCytokine = parafac4microbiome::parafac(processedCytokine$data, nfac=2, nstart=100)
# saveRDS(modelCytokine, "./Models/PARAFAC/GOHTRANS_cytokine_PARAFAC.RDS")
modelCytokine = readRDS("./Models/PARAFAC/GOHTRANS_cytokine_PARAFAC.RDS")
timepoints = c(0, 3, 6, 12)
# Saliva
normalSubjectLoadings = processedSaliva$mode1 %>% as_tibble() %>% mutate(Component_1 = modelSaliva$Fac[[1]][,1], Component_2 = modelSaliva$Fac[[1]][,2])
transformedSubjectLoadings = transformPARAFACloadings(modelSaliva$Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(processedSaliva$mode1$subject, each=4), newTimepoint = rep(timepoints, 39))
uncorrectedP = matrix(NA, nrow=2, ncol=14)
# GenderID
uncorrectedP[1,1] = wilcox.test(normalSubjectLoadings %>% filter(GenderID=="TM") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(GenderID=="TW") %>% select(Component_1) %>% pull())$p.value
uncorrectedP[2,1] = wilcox.test(normalSubjectLoadings %>% filter(GenderID=="TM") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(GenderID=="TW") %>% select(Component_2) %>% pull())$p.value
# Age
temp = normalSubjectLoadings %>% left_join(salivaSampleMeta %>% select(subject, GenderID, Age))
uncorrectedP[1,2] = cor.test(temp$Component_1, temp$Age)$p.value
uncorrectedP[2,2] = cor.test(temp$Component_2, temp$Age)$p.value
# Estradiol
temp = transformedSubjectLoadings %>% left_join(salivaSampleMeta) %>% select(V1, V2, newTimepoint, Estradiol_pmol_ml)
uncorrectedP[1,3] = cor.test(temp$V1, temp$Estradiol_pmol_ml)$p.value
uncorrectedP[2,3] = cor.test(temp$V2, temp$Estradiol_pmol_ml)$p.value
# Testosterone
temp = transformedSubjectLoadings %>% left_join(salivaSampleMeta) %>% select(V1, V2, newTimepoint, Testosterone_nmol_L)
uncorrectedP[1,4] = cor.test(temp$V1, temp$Testosterone_nmol_L)$p.value
uncorrectedP[2,4] = cor.test(temp$V2, temp$Testosterone_nmol_L)$p.value
# LH
temp = transformedSubjectLoadings %>% left_join(salivaSampleMeta) %>% select(V1, V2, newTimepoint, LH_U_L)
uncorrectedP[1,5] = cor.test(temp$V1, temp$LH_U_L)$p.value
uncorrectedP[2,5] = cor.test(temp$V2, temp$LH_U_L)$p.value
# SHBG
temp = transformedSubjectLoadings %>% left_join(salivaSampleMeta) %>% select(V1, V2, newTimepoint, SHBG_nmol_L)
uncorrectedP[1,6] = cor.test(temp$V1, temp$SHBG_nmol_L)$p.value
uncorrectedP[2,6] = cor.test(temp$V2, temp$SHBG_nmol_L)$p.value
# MUC5B
temp = transformedSubjectLoadings %>% left_join(salivaSampleMeta) %>% select(V1, V2, newTimepoint, MUC_5_B_ug_ml)
uncorrectedP[1,7] = cor.test(temp$V1, temp$MUC_5_B_ug_ml)$p.value
uncorrectedP[2,7] = cor.test(temp$V2, temp$MUC_5_B_ug_ml)$p.value
# Chitinase
temp = transformedSubjectLoadings %>% left_join(salivaSampleMeta) %>% select(V1, V2, newTimepoint, Chitinase_AU_ml)
uncorrectedP[1,8] = cor.test(temp$V1, temp$Chitinase_AU_ml)$p.value
uncorrectedP[2,8] = cor.test(temp$V2, temp$Chitinase_AU_ml)$p.value
# S-igA
temp = transformedSubjectLoadings %>% left_join(salivaSampleMeta) %>% select(V1, V2, newTimepoint, S_IgA_ug_ml)
uncorrectedP[1,9] = cor.test(temp$V1, temp$S_IgA_ug_ml)$p.value
uncorrectedP[2,9] = cor.test(temp$V2, temp$S_IgA_ug_ml)$p.value
# Lysozyme
temp = transformedSubjectLoadings %>% left_join(salivaSampleMeta) %>% select(V1, V2, newTimepoint, Lysozyme_U_ml)
uncorrectedP[1,10] = cor.test(temp$V1, temp$Lysozyme_U_ml)$p.value
uncorrectedP[2,10] = cor.test(temp$V2, temp$Lysozyme_U_ml)$p.value
# Amylase
temp = transformedSubjectLoadings %>% left_join(salivaSampleMeta) %>% select(V1, V2, newTimepoint, Amylase_U_ml)
uncorrectedP[1,11] = cor.test(temp$V1, temp$Amylase_U_ml)$p.value
uncorrectedP[2,11] = cor.test(temp$V2, temp$Amylase_U_ml)$p.value
# Total protein
temp = transformedSubjectLoadings %>% left_join(salivaSampleMeta) %>% select(V1, V2, newTimepoint, Total_protein_ug_ml)
uncorrectedP[1,12] = cor.test(temp$V1, temp$Total_protein_ug_ml)$p.value
uncorrectedP[2,12] = cor.test(temp$V2, temp$Total_protein_ug_ml)$p.value
# BOMP
temp = transformedSubjectLoadings %>% left_join(otherMeta) %>% select(V1, V2, newTimepoint, boppercent)
uncorrectedP[1,13] = cor.test(temp$V1, temp$boppercent)$p.value
uncorrectedP[2,13] = cor.test(temp$V2, temp$boppercent)$p.value
# pH
temp = transformedSubjectLoadings %>% left_join(otherMeta) %>% select(V1, V2, newTimepoint, pH)
uncorrectedP[1,14] = cor.test(temp$V1, temp$pH)$p.value
uncorrectedP[2,14] = cor.test(temp$V2, temp$pH)$p.value
print(uncorrectedP)
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=2, ncol=14)
print(correctedP)
modelSaliva$Fac[[1]]
cbind(modelSaliva$Fac[[1]], salivaSampleMeta)
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1
)
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble()
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% ggplot(aes(x=as.factor(GenderID),y=`1`,fill=as.factor(GenderID))) + geom_boxplot()
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% pivot_longer(-subject)
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% select(-GenderID)
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% pivot_longer(-GenderID)
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% pivot_longer(-c(subjectGenderID))
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% pivot_longer(-c(subject,GenderID))
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% pivot_longer(-c(subject,GenderID)) %>% ggplot(aes(x=as.factor(GenderID),y=value,fill=as.factor(GenderID))) + facet_wrap(~name) + geom_boxplot()
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% pivot_longer(-c(subject,GenderID)) %>% ggplot(aes(x=as.factor(GenderID),y=value,fill=as.factor(GenderID))) + facet_wrap(~name) + geom_boxplot() + stat_compare_means()
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% pivot_longer(-c(subject,GenderID)) %>% ggplot(aes(x=as.factor(GenderID),y=value,fill=as.factor(GenderID))) + facet_wrap(~name) + geom_boxplot() + stat_compare_means() + xlab("Gender identity") + ylab("Component 1")
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% pivot_longer(-c(subject,GenderID)) %>% ggplot(aes(x=as.factor(GenderID),y=value,fill=as.factor(GenderID))) + facet_wrap(~name) + geom_boxplot() + stat_compare_means() + xlab("Gender identity") + ylab("Component 1") + theme(legend.position="none")
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% pivot_longer(-c(subject,GenderID)) %>% ggplot(aes(x=as.factor(GenderID),y=`1`,fill=as.factor(GenderID))) + geom_boxplot() + stat_compare_means() + xlab("Gender identity") + ylab("Component 1") + theme(legend.position="none")
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% ggplot(aes(x=as.factor(GenderID),y=`1`,fill=as.factor(GenderID))) + geom_boxplot() + stat_compare_means() + xlab("Gender identity") + ylab("Component 1") + theme(legend.position="none")
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% left_join(salivaSampleMeta)
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% left_join(salivaSampleMeta) %>% left_join(otherMeta)
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% left_join(salivaSampleMeta) %>% left_join(otherMeta) %>% ggplot(aes(x=pH,y=`1`)) + geom_point()
normalSubjectLoadings = processedSaliva$mode1 %>% as_tibble() %>% mutate(Component_1 = modelSaliva$Fac[[1]][,1], Component_2 = modelSaliva$Fac[[1]][,2])
transformedSubjectLoadings = transformPARAFACloadings(modelSaliva$Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(processedSaliva$mode1$subject, each=4), newTimepoint = rep(timepoints, 39))
transformedSubjectLoadings
transformedSubjectLoadings %>% left_join(otherMeta)
transformedSubjectLoadings %>% left_join(otherMeta) %>% ggplot(aes(x=pH,y=V1)) + geom_point9)
transformedSubjectLoadings %>% left_join(otherMeta) %>% ggplot(aes(x=pH,y=V1)) + geom_point()
transformedSubjectLoadings %>% left_join(otherMeta) %>% ggplot(aes(x=pH,y=V1)) + geom_point() + stat_cor()
transformedSubjectLoadings %>% left_join(otherMeta) %>% ggplot(aes(x=pH,y=V1)) + geom_point() + stat_cor() + ylab("Component 1")
model = modelSaliva
# Comp 1 is not connected to GenderID
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% ggplot(aes(x=as.factor(GenderID),y=`1`,fill=as.factor(GenderID))) + geom_boxplot() + stat_compare_means() + xlab("Gender identity") + ylab("Component 1") + theme(legend.position="none")
# It is connected to pH
normalSubjectLoadings = processedSaliva$mode1 %>% as_tibble() %>% mutate(Component_1 = modelSaliva$Fac[[1]][,1], Component_2 = modelSaliva$Fac[[1]][,2])
transformedSubjectLoadings = transformPARAFACloadings(modelSaliva$Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(processedSaliva$mode1$subject, each=4), newTimepoint = rep(timepoints, 39))
transformedSubjectLoadings %>% left_join(otherMeta) %>% ggplot(aes(x=pH,y=V1)) + geom_point() + stat_cor() + ylab("Component 1")
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% ggplot(aes(x=as.factor(GenderID),y=`1`,fill=as.factor(GenderID))) + geom_boxplot() + stat_compare_means() + xlab("Gender identity") + ylab("Component 1") + theme(legend.position="none")
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% ggplot(aes(x=as.factor(GenderID),y=`1`,fill=as.factor(GenderID))) + geom_boxplot() + geom_jitter() + stat_compare_means() + xlab("Gender identity") + ylab("Component 1") + theme(legend.position="none")
?geom_jitter
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% ggplot(aes(x=as.factor(GenderID),y=`1`,fill=as.factor(GenderID))) + geom_boxplot() + geom_jitter() + stat_compare_means(height=0, width=0.05) + xlab("Gender identity") + ylab("Component 1") + theme(legend.position="none")
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% ggplot(aes(x=as.factor(GenderID),y=`1`,fill=as.factor(GenderID))) + geom_boxplot() + geom_jitter() + stat_compare_means(height=0, width=0.01) + xlab("Gender identity") + ylab("Component 1") + theme(legend.position="none")
# Comp 1 is not connected to GenderID
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% ggplot(aes(x=as.factor(GenderID),y=`1`,fill=as.factor(GenderID))) + geom_boxplot() + geom_jitter(height=0, width=0.001) + stat_compare_means() + xlab("Gender identity") + ylab("Component 1") + theme(legend.position="none")
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% ggplot(aes(x=as.factor(GenderID),y=`1`,fill=as.factor(GenderID))) + geom_boxplot() + geom_jitter(height=0, width=0.1) + stat_compare_means() + xlab("Gender identity") + ylab("Component 1") + theme(legend.position="none")
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% ggplot(aes(x=as.factor(GenderID),y=`1`,fill=as.factor(GenderID))) + geom_boxplot() + geom_jitter(height=0, width=0.1) + stat_compare_means(comparisons = list(c("TM", "TW"))) + xlab("Gender identity") + ylab("Component 1") + theme(legend.position="none")
?stat_compare_means()
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% ggplot(aes(x=as.factor(GenderID),y=`1`,fill=as.factor(GenderID))) + geom_boxplot() + geom_jitter(height=0, width=0.1) + stat_compare_means(comparisons = list(c("TM", "TW")),label="p.format") + xlab("Gender identity") + ylab("Component 1") + theme(legend.position="none")
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% ggplot(aes(x=as.factor(GenderID),y=`1`,fill=as.factor(GenderID))) + geom_boxplot() + geom_jitter(height=0, width=0.1) + stat_compare_means(comparisons = list(c("TM", "TW")),label="p.signif") + xlab("Gender identity") + ylab("Component 1") + theme(legend.position="none")
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% ggplot(aes(x=as.factor(GenderID),y=`1`,fill=as.factor(GenderID))) + geom_boxplot() + geom_jitter(height=0, width=0.1) + stat_compare_means(comparisons = list(c("TM", "TW")),label="p.signif") + xlab("Gender identity") + ylab("Component 1") + scale_x_discrete(labels=c("Transmasculine", "Transfeminine"))
cbind(modelSaliva$Fac[[1]], processedSaliva$mode1) %>% as_tibble() %>% ggplot(aes(x=as.factor(GenderID),y=`1`)) + geom_boxplot() + geom_jitter(height=0, width=0.1) + stat_compare_means(comparisons = list(c("TM", "TW")),label="p.signif") + xlab("Gender identity") + ylab("Component 1") + scale_x_discrete(labels=c("Transmasculine", "Transfeminine"))
normalSubjectLoadings = processedSaliva$mode1 %>% as_tibble() %>% mutate(Component_1 = modelSaliva$Fac[[1]][,1], Component_2 = modelSaliva$Fac[[1]][,2])
transformedSubjectLoadings = transformPARAFACloadings(modelSaliva$Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(processedSaliva$mode1$subject, each=4), newTimepoint = rep(timepoints, 39))
transformedSubjectLoadings %>% left_join(otherMeta) %>% ggplot(aes(x=pH,y=V1)) + geom_point() + stat_cor() + ylab("Component 1")
transformedSubjectLoadings %>% left_join(otherMeta) %>% ggplot(aes(x=pH,y=V1)) + geom_point() + stat_cor() + ylab("Component 1")
