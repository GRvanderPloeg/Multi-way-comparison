obj = processedMetabolomics
Fac = model$Fac
normalSubjectLoadings = cbind(model$Fac[[1]], obj$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(obj$mode1$subject, each=5), day = rep(c(0,2,5,9,14),40))
uncorrectedP = matrix(0L, nrow=1, ncol=5)
# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
# uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value
# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
# uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value
# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
# uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value
# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)
uncorrectedP[1,4] = t.test(partA$`model$Fac[[1]]`, partB$`model$Fac[[1]]`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
# uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value
# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`model$Fac[[1]]`, temp$age, method="pearson")$p.value
# uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=5)
correctedP
modelMetabolomics$varExpX
modelMetabolomics$varExpY
library(ggplot2)
library(parafac4microbiome)
processedGeorgiou = readRDS("./Data/AP/cytokines_processed.RDS")
mode1 = read.csv("./Models/NPLS/AP/AP_mode1.csv", header=FALSE)
library(ggplot2)
library(parafac4microbiome)
processedGeorgiou = readRDS("./Data/AP/cytokines_processed.RDS")
Y = as.numeric(as.factor(processedGeorgiou$mode1$PainS_NopainA))
Ycnt = Y - mean(Y)
result = NPLStoolbox::ncrossreg(processedGeorgiou$data, Ycnt)
Ycnt
processedGeorgiou = readRDS("./Data/AP/cytokines_processed.RDS")
processedGeorgiou
processedGeorgiou$mode1
processedGeorgiou
library(ggplot2)
library(parafac4microbiome)
processedGeorgiou = readRDS("./Data/AP/cytokines_processed.RDS")
processedGeorgiou$data
processedGeorgiou$mode1
Y = as.numeric(as.factor(processedGeorgiou$mode1$PainS_NopainA))
Ycnt = Y - mean(Y)
Ycnt
processedGeorgiou$mode1$PainS_NopainA
Y = as.numeric(as.factor(processedGeorgiou$mode1$case_control))
Ycnt = Y - mean(Y)
Ycnt
result = NPLStoolbox::ncrossreg(processedGeorgiou$data, Ycnt)
result
model = NPLStoolbox::triPLS1(processedGeorgiou$data, Ycnt, 1)
saveRDS(model, "./Models/NPLS/AP_cytokine_NPLS.RDS")
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)
normalSubjectLoadings = prepMode1 %>% as_tibble() %>% left_join(cytokines_meta_data) %>% left_join(otherMeta,by="SubjectID")
cbind(model$Fac[[1]], processedGeorgiou$mode1)
cbind(model$Fac[[1]], processedGeorgiou$mode1)%>% as_tibble()
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)
normalSubjectLoadings = cbind(model$Fac[[1]], processedGeorgiou$mode1)%>% as_tibble() %>% left_join(cytokines_meta_data) %>% left_join(otherMeta,by="SubjectID")
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)
normalSubjectLoadings = cbind(model$Fac[[1]], processedGeorgiou$mode1)%>% as_tibble() %>% left_join(otherMeta,by="SubjectID")
uncorrectedP = matrix(NA, nrow=1, ncol=4)
# Gender
uncorrectedP[1,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_1) %>% pull())$p.value
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)
normalSubjectLoadings = processedGeorgiou$mode1 %>% mutate(Component_1 = model$Fac[[1]][,1]) %>% left_join(otherMeta,by="SubjectID")
uncorrectedP = matrix(NA, nrow=1, ncol=4)
# Gender
uncorrectedP[1,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_2) %>% pull())$p.value
# Age
uncorrectedP[1,2] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$Age.x)$p.value
# uncorrectedP[2,2] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$Age)$p.value
# DMFT
uncorrectedP[1,3] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$DMFT)$p.value
# uncorrectedP[2,3] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$DMFT)$p.value
# pain-noPain
uncorrectedP[1,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA.x=="Symptomatic") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA.x=="Asymptomatic") %>% select(Component_1) %>% pull())$p.value
normalSubjectLoadings %>% filter(PainS_NopainA.x=="Symptomatic")
normalSubjectLoadings %>% filter(PainS_NopainA.x=="S")
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)
normalSubjectLoadings = processedGeorgiou$mode1 %>% mutate(Component_1 = model$Fac[[1]][,1]) %>% left_join(otherMeta,by="SubjectID")
uncorrectedP = matrix(NA, nrow=1, ncol=4)
# Gender
uncorrectedP[1,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_2) %>% pull())$p.value
# Age
uncorrectedP[1,2] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$Age.x)$p.value
# uncorrectedP[2,2] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$Age)$p.value
# DMFT
uncorrectedP[1,3] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$DMFT)$p.value
# uncorrectedP[2,3] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$DMFT)$p.value
# pain-noPain
uncorrectedP[1,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA.x=="S") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA.x=="A") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA=="S") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA=="A") %>% select(Component_2) %>% pull())$p.value
print(uncorrectedP)
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=4)
print(correctedP)
model$varExpX
model$varExpY
normalSubjectLoadings$case_control
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)
normalSubjectLoadings = processedGeorgiou$mode1 %>% mutate(Component_1 = model$Fac[[1]][,1]) %>% left_join(otherMeta,by="SubjectID")
uncorrectedP = matrix(NA, nrow=1, ncol=5)
# Gender
uncorrectedP[1,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_2) %>% pull())$p.value
# Age
uncorrectedP[1,2] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$Age.x)$p.value
# uncorrectedP[2,2] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$Age)$p.value
# DMFT
uncorrectedP[1,3] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$DMFT)$p.value
# uncorrectedP[2,3] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$DMFT)$p.value
# pain-noPain
uncorrectedP[1,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA.x=="S") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA.x=="A") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA=="S") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA=="A") %>% select(Component_2) %>% pull())$p.value
# Case/control
uncorrectedP[1,5] = wilcox.test(normalSubjectLoadings %>% filter(case_control=="case") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(case_control=="control") %>% select(Component_1) %>% pull())$p.value
print(uncorrectedP)
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=4)
print(correctedP)
otherMeta = read.csv("./Data/AP/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble() %>% select(-Gender)
timepoints = c(-6, -3, 0, 1, 6, 13)
normalSubjectLoadings = processedGeorgiou$mode1 %>% mutate(Component_1 = model$Fac[[1]][,1]) %>% left_join(otherMeta,by="SubjectID")
uncorrectedP = matrix(NA, nrow=1, ncol=5)
# Gender
uncorrectedP[1,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,1] = wilcox.test(normalSubjectLoadings %>% filter(Gender=="M") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(Gender=="F") %>% select(Component_2) %>% pull())$p.value
# Age
uncorrectedP[1,2] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$Age.x)$p.value
# uncorrectedP[2,2] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$Age)$p.value
# DMFT
uncorrectedP[1,3] = cor.test(normalSubjectLoadings$Component_1, normalSubjectLoadings$DMFT)$p.value
# uncorrectedP[2,3] = cor.test(normalSubjectLoadings$Component_2, normalSubjectLoadings$DMFT)$p.value
# pain-noPain
uncorrectedP[1,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA.x=="S") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA.x=="A") %>% select(Component_1) %>% pull())$p.value
# uncorrectedP[2,4] = wilcox.test(normalSubjectLoadings %>% filter(PainS_NopainA=="S") %>% select(Component_2) %>% pull(), normalSubjectLoadings %>% filter(PainS_NopainA=="A") %>% select(Component_2) %>% pull())$p.value
# Case/control
uncorrectedP[1,5] = wilcox.test(normalSubjectLoadings %>% filter(case_control=="case") %>% select(Component_1) %>% pull(), normalSubjectLoadings %>% filter(case_control=="control") %>% select(Component_1) %>% pull())$p.value
print(uncorrectedP)
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=1, ncol=5)
print(correctedP)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(stringr)
library(parafac4microbiome)
library(CMTFtoolbox)
processedTongue = readRDS("./Data/TIFN/tongue.RDS")
processedLowling = readRDS("./Data/TIFN/lowling.RDS")
processedLowinter = readRDS("./Data/TIFN/lowinter.RDS")
processedUpling = readRDS("./Data/TIFN/upling.RDS")
processedUpinter = readRDS("./Data/TIFN/upinter.RDS")
processedSaliva = readRDS("./Data/TIFN/saliva.RDS")
processedMetabolomics = readRDS("./Data/TIFN/metabolomics.RDS")
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(stringr)
library(parafac4microbiome)
library(CMTFtoolbox)
# Load count data
raw_data = read.csv("./Data/TIFN/20221005_wp2/count-table.tsv", sep="\t") %>% as_tibble()
metadata = raw_data %>% select(sample, subject, visit, group, niche)
counts   = raw_data %>% select(-sample, -subject, -visit, -group, -niche)
taxa = read.csv("./Data/TIFN/20221005_wp2/taxonomic-classification.tsv", sep="\t") %>% as_tibble()
# Load RF data
rf_data = read.csv("./Data/TIFN/RFdata.csv")
colnames(rf_data) = c("subject", "id", "fotonr", "day", "group", "RFgroup", "MQH", "SPS(tm)", "Area_delta_R30", "Area_delta_Rmax", "Area_delta_R30_x_Rmax", "gingiva_mean_R_over_G", "gingiva_mean_R_over_G_upper_jaw", "gingiva_mean_R_over_G_lower_jaw")
rf_data = rf_data %>% as_tibble()
rf_data[rf_data$subject == "VSTPHZ", 1] = "VSTPH2"
rf_data[rf_data$subject == "D2VZH0", 1] = "DZVZH0"
rf_data[rf_data$subject == "DLODNN", 1] = "DLODDN"
rf_data[rf_data$subject == "O3VQFX", 1] = "O3VQFQ"
rf_data[rf_data$subject == "F80LGT", 1] = "F80LGF"
rf_data[rf_data$subject == "26QQR0", 1] = "26QQrO"
# rf_data2 = read.csv("./data-raw/vanderPloeg2024_RFdata2.csv") %>% as_tibble()
# rf_data2 = rf_data2[,c(2,4,181:192)]
# rf_data = rf_data %>% left_join(rf_data2)
rf = rf_data %>% select(subject, RFgroup) %>% unique()
# Attach RF data to metadata
metadata = metadata %>% left_join(rf)
# Remove test
mask = metadata$group == "control"
counts = counts[mask,]
metadata = metadata[mask,]
# Prepare export of metadata
mode1 = metadata %>% select(subject, RFgroup) %>% unique() %>% arrange(subject)
mode3 = metadata %>% select(visit) %>% unique() %>% arrange(visit) %>% mutate(status=c("Baseline", "EG", "EG", "EG", "EG", "EG", "Resolution"))
# Tongue
tongueMask = metadata$niche == "tongue"
df_tongue = counts[tongueMask,]
metadata_tongue = metadata[tongueMask,]
# Prep feature metadata - THIS IS DIFFERENT FROM TIFN
sparsity = colSums(df_tongue == 0) / nrow(df_tongue)
featureMask = sparsity < 1
df_tongue = df_tongue[,featureMask]
mode2 = taxa[featureMask,]
# Put into cube
I = length(unique(metadata$subject))
J = ncol(df_tongue)
K = max(metadata$visit)
X = array(0L, c(I,J,K))
for(k in 1:K){
X[,,k] = cbind(df_tongue, metadata_tongue) %>%
as_tibble() %>%
filter(visit == k) %>%
right_join(metadata %>% select(subject) %>% unique()) %>%
arrange(subject) %>%
select(-all_of(colnames(metadata))) %>%
as.matrix()
}
tongue = list("data"=X, "mode1"=mode1, "mode2"=mode2, "mode3"=mode3)
# Lowling
lowlingMask = metadata$niche == "lower jaw, lingual"
df_lowling = counts[lowlingMask,]
metadata_lowling = metadata[lowlingMask,]
# Prep feature metadata - THIS IS DIFFERENT FROM TIFN
sparsity = colSums(df_lowling == 0) / nrow(df_lowling)
featureMask = sparsity < 1
df_lowling = df_lowling[,featureMask]
mode2 = taxa[featureMask,]
# Put into cube
I = length(unique(metadata$subject))
J = ncol(df_lowling)
K = max(metadata$visit)
X = array(0L, c(I,J,K))
for(k in 1:K){
X[,,k] = cbind(df_lowling, metadata_lowling) %>%
as_tibble() %>%
filter(visit == k) %>%
right_join(metadata %>% select(subject) %>% unique()) %>%
arrange(subject) %>%
select(-all_of(colnames(metadata))) %>%
as.matrix()
}
lowling = list("data"=X, "mode1"=mode1, "mode2"=mode2, "mode3"=mode3)
# Lowinter
lowinterMask = metadata$niche == "lower jaw, interproximal"
df_lowinter = counts[lowinterMask,]
metadata_lowinter = metadata[lowinterMask,]
# Prep feature metadata - THIS IS DIFFERENT FROM TIFN
sparsity = colSums(df_lowinter == 0) / nrow(df_lowinter)
featureMask = sparsity < 1
df_lowinter = df_lowinter[,featureMask]
mode2 = taxa[featureMask,]
# Put into cube
I = length(unique(metadata$subject))
J = ncol(df_lowinter)
K = max(metadata$visit)
X = array(0L, c(I,J,K))
for(k in 1:K){
X[,,k] = cbind(df_lowinter, metadata_lowinter) %>%
as_tibble() %>%
filter(visit == k) %>%
right_join(metadata %>% select(subject) %>% unique()) %>%
arrange(subject) %>%
select(-all_of(colnames(metadata))) %>%
as.matrix()
}
lowinter = list("data"=X, "mode1"=mode1, "mode2"=mode2, "mode3"=mode3)
# Upling
uplingMask = metadata$niche == "upper jaw, lingual"
df_upling = counts[uplingMask,]
metadata_upling = metadata[uplingMask,]
# Prep feature metadata - THIS IS DIFFERENT FROM TIFN
sparsity = colSums(df_upling == 0) / nrow(df_upling)
featureMask = sparsity < 1
df_upling = df_upling[,featureMask]
mode2 = taxa[featureMask,]
# Put into cube
I = length(unique(metadata$subject))
J = ncol(df_upling)
K = max(metadata$visit)
X = array(0L, c(I,J,K))
for(k in 1:K){
X[,,k] = cbind(df_upling, metadata_upling) %>%
as_tibble() %>%
filter(visit == k) %>%
right_join(metadata %>% select(subject) %>% unique()) %>%
arrange(subject) %>%
select(-all_of(colnames(metadata))) %>%
as.matrix()
}
upling = list("data"=X, "mode1"=mode1, "mode2"=mode2, "mode3"=mode3)
# Upinter
upinterMask = metadata$niche == "upper jaw, interproximal"
df_upinter = counts[upinterMask,]
metadata_upinter = metadata[upinterMask,]
# Prep feature metadata - THIS IS DIFFERENT FROM TIFN
sparsity = colSums(df_upinter == 0) / nrow(df_upinter)
featureMask = sparsity < 1
df_upinter = df_upinter[,featureMask]
mode2 = taxa[featureMask,]
# Put into cube
I = length(unique(metadata$subject))
J = ncol(df_upinter)
K = max(metadata$visit)
X = array(0L, c(I,J,K))
for(k in 1:K){
X[,,k] = cbind(df_upinter, metadata_upinter) %>%
as_tibble() %>%
filter(visit == k) %>%
right_join(metadata %>% select(subject) %>% unique()) %>%
arrange(subject) %>%
select(-all_of(colnames(metadata))) %>%
as.matrix()
}
upinter = list("data"=X, "mode1"=mode1, "mode2"=mode2, "mode3"=mode3)
# Saliva
salivaMask = metadata$niche == "saliva"
df_saliva = counts[salivaMask,]
metadata_saliva = metadata[salivaMask,]
# Prep feature metadata - THIS IS DIFFERENT FROM TIFN
sparsity = colSums(df_saliva == 0) / nrow(df_saliva)
featureMask = sparsity < 1
df_saliva = df_saliva[,featureMask]
mode2 = taxa[featureMask,]
# Put into cube
I = length(unique(metadata$subject))
J = ncol(df_saliva)
K = max(metadata$visit)
X = array(0L, c(I,J,K))
for(k in 1:K){
X[,,k] = cbind(df_saliva, metadata_saliva) %>%
as_tibble() %>%
filter(visit == k) %>%
right_join(metadata %>% select(subject) %>% unique()) %>%
arrange(subject) %>%
select(-all_of(colnames(metadata))) %>%
as.matrix()
}
saliva = list("data"=X, "mode1"=mode1, "mode2"=mode2, "mode3"=mode3)
lowling$data[1:10,1:10,1]
lowling$data %>% dim
lowinter$data %>% dim
lowling$mode1
lowling$mode2
processedTongue = processDataCube(tongue, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable="RFgroup", CLR=TRUE, centerMode=1, scaleMode=2)
processedLowling = processDataCube(lowling, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable="RFgroup", CLR=TRUE, centerMode=1, scaleMode=2)
processedLowinter = processDataCube(lowinter, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable="RFgroup", CLR=TRUE, centerMode=1, scaleMode=2)
processedUpling = processDataCube(upling, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable="RFgroup", CLR=TRUE, centerMode=1, scaleMode=2)
processedUpinter = processDataCube(upinter, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable="RFgroup", CLR=TRUE, centerMode=1, scaleMode=2)
processedSaliva = processDataCube(saliva, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable="RFgroup", CLR=TRUE, centerMode=1, scaleMode=2)
processedLowLing
processedLowling$data %>% dim
upling$data %>% dim
all.equal(upling$data, parafac4microbiome::vanderPloeg2024$data)
processedPloeg = processDataCube(vanderPloeg2024, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable="RFgroup", CLR=TRUE, centerMode=1, scaleMode=2)
all.equal(processedUpling, processedPloeg)
all.equal(processedUpling$data, processedPloeg)
all.equal(processedUpling$data, processedPloeg$data)
processedUpling$mode1
processedUpling$mode2
processedUpling$mode3
processedPloeg$mode1
processedPloeg$mode2
processedPloeg$mode3
processedTongue = readRDS("./Data/GOHTRANS/tongue.RDS")
processedTongue$data %>% dim
library(tidyverse)
library(vegan)
library(ggpubr)
library(ape)
library(Polychrome)
library(parafac4microbiome)
processedTongue = readRDS("./Data/GOHTRANS/tongue.RDS")
processedSaliva = readRDS("./Data/GOHTRANS/saliva.RDS")
processedCytokine = readRDS("./Data/GOHTRANS/cytokine.RDS")
processedTongue$data %>% dim
processedTongue$data[1:10,1:10,1]
# result = assessModelQuality(processedTongue$data, numRepetitions=10, numCores=parallel::detectCores())
# result$plots$overview
# result2 = assessModelStability(processedTongue, maxNumComponents = 3, numFolds=10)
# modelTongue = parafac4microbiome::parafac(processedTongue$data, nfac=2, nstart=100)
# saveRDS(modelTongue, "./Models/PARAFAC/GOHTRANS_tongue_PARAFAC.RDS")
modelTongue = readRDS("./Models/PARAFAC/GOHTRANS_tongue_PARAFAC.RDS")
modelTongue$varExp
processedSaliva$data %>% dim
processedSaliva$data[1:10,1:10,1]
processedCytokine$data %>% dim
processedCytokine$data[1:10,1:10,1]
# result = assessModelQuality(processedSaliva$data, numRepetitions=10, numCores=parallel::detectCores())
# result$plots$overview
# modelSaliva = parafac4microbiome::parafac(processedSaliva$data, nfac=2, nstart=100)
# saveRDS(modelSaliva, "./Models/PARAFAC/GOHTRANS_saliva_PARAFAC.RDS")
modelSaliva = readRDS("./Models/PARAFAC/GOHTRANS_saliva_PARAFAC.RDS")
# result = assessModelQuality(processedCytokine$data, numRepetitions=10, numCores=parallel::detectCores())
# result$plots$overview
# result2 = assessModelStability(processedCytokine, maxNumComponents = 3, numFolds=10)
# modelCytokine = parafac4microbiome::parafac(processedCytokine$data, nfac=2, nstart=100)
# saveRDS(modelCytokine, "./Models/PARAFAC/GOHTRANS_cytokine_PARAFAC.RDS")
modelCytokine = readRDS("./Models/PARAFAC/GOHTRANS_cytokine_PARAFAC.RDS")
modelTongue$varExp
modelSaliva$varExp
modelCytokine$varExp
library(tidyverse)
library(vegan)
library(ggpubr)
library(ape)
library(Polychrome)
library(parafac4microbiome)
library(NPLStoolbox)
processedTongue = readRDS("./Data/GOHTRANS/tongue.RDS")
processedSaliva = readRDS("./Data/GOHTRANS/saliva.RDS")
processedCytokine = readRDS("./Data/GOHTRANS/cytokine.RDS")
sampleMeta = read.csv("./Data/GOHTRANS/sampleInfo_fixed.csv", sep=" ") %>% as_tibble()
tongueSampleMeta = sampleMeta[sampleMeta$Niche == "Tongue",]
salivaSampleMeta = sampleMeta[sampleMeta$Niche == "Saliva",]
# Load other metadata and ph
ph_BOMP = read_delim("Data/GOHTRANS/GOH-TRANS_csv_export_20240205114955/GOH-TRANS_export_20240205.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>% as_tibble()
df1 = ph_BOMP %>% select(`Participant Id`, starts_with("5.")) %>% mutate(subject = 1:42, numTeeth = `5.1|Number of teeth`, DMFT = `5.2|DMFT`, numBleedingSites = `5.3|Bleeding sites`, boppercent = `5.4|BOP%`, DPSI = `5.5|DPSI`, pH = `5.8|pH`) %>% select(subject, numTeeth, DMFT, numBleedingSites, boppercent, DPSI, pH)
df2 = ph_BOMP %>% select(`Participant Id`, starts_with("12.")) %>% mutate(subject = 1:42, numTeeth = `12.1|Number of teeth`, DMFT = `12.2|DMFT`, numBleedingSites = `12.3|Bleeding sites`, boppercent = `12.4|BOP%`, DPSI = `12.5|DPSI`, pH = `12.8|pH`) %>% select(subject, numTeeth, DMFT, numBleedingSites, boppercent, DPSI, pH)
df3 = ph_BOMP %>% select(`Participant Id`, starts_with("19.")) %>% mutate(subject = 1:42, numTeeth = `19.1|Number of teeth`, DMFT = `19.2|DMFT`, numBleedingSites = `19.3|Bleeding sites`, boppercent = `19.4|BOP%`, DPSI = `19.5|DPSI`, pH = `19.8|pH`) %>% select(subject, numTeeth, DMFT, numBleedingSites, boppercent, DPSI, pH)
df4 = ph_BOMP %>% select(`Participant Id`, starts_with("26.")) %>% mutate(subject = 1:42, numTeeth = `26.1|Number of teeth`, DMFT = `26.2|DMFT`, numBleedingSites = `26.3|Bleeding sites`, boppercent = `26.4|BOP%`, DPSI = `26.5|DPSI`, pH = `26.8|pH`) %>% select(subject, numTeeth, DMFT, numBleedingSites, boppercent, DPSI, pH)
otherMeta = rbind(df1, df2, df3, df4) %>% as_tibble() %>% mutate(newTimepoint = rep(c(0,3,6,12), each=42))
# Remove pH measurements of lower than 0
otherMeta = otherMeta[!otherMeta$pH < 1,] %>% as_tibble()
Y = as.numeric(as.factor(Cornejo2025$Tongue$mode1$GenderID))
Ycnt = Y - mean(Y)
result = NPLStoolbox::ncrossreg(Cornejo2025$Tongue$data, Ycnt)
tongue_NPLS = NPLStoolbox::triPLS1(Cornejo2025$Tongue$data, Ycnt, 1)
saveRDS(tongue_NPLS, "./Models/NPLS/GOHTRANS_tongue_NPLS.RDS")
tongue_NPLS$varExpX
tongue_NPLS$varExpY
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(stringr)
library(parafac4microbiome)
library(CMTFtoolbox)
milkMetab = readRDS("./Data/BMI/milkMetab.RDS")
milk = readRDS("./Data/BMI/milk.RDS")
faeces = readRDS("./Data/BMI/faeces.RDS")
faeces$data %>% dim
faeces$data[1:10,1:10,1]
milk$data %>% dim
milk$data[1:10,1:10,1]
milkMetab$data %>% dim
milkMetab$data[1:10,1:10,1]
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(stringr)
library(parafac4microbiome)
library
# result = parafac4microbiome::assessModelQuality(faeces$data, numRepetitions=10, numCores=parallel::detectCores())
# result$plots$overview
# result2 = parafac4microbiome::assessModelStability(faeces, maxNumComponents=3, numFolds=10)
# modelFaeces = parafac4microbiome::parafac(faeces$data, nfac=2, nstart=100)
# saveRDS(modelFaeces, "./Models/PARAFAC/BMI_faeces.RDS")
modelFaeces = readRDS("./Models/PARAFAC/BMI_faeces.RDS")
# result = parafac4microbiome::assessModelQuality(milk$data, numRepetitions=10, numCores=parallel::detectCores())
# result$plots$overview
# result2 = parafac4microbiome::assessModelStability(milk, maxNumComponents=3, numFolds=10)
# modelMilk = parafac4microbiome::parafac(milk$data, nfac=3, nstart=100)
# saveRDS(modelMilk, "./Models/PARAFAC/BMI_milk.RDS")
modelMilk = readRDS("./Models/PARAFAC/BMI_milk.RDS")
# result = parafac4microbiome::assessModelQuality(milkMetab$data, numRepetitions=10, numCores=parallel::detectCores())
# result$plots$overview
# result2 = parafac4microbiome::assessModelStability(milkMetab, maxNumComponents=3, numFolds=10)
# modelMilkMetab = parafac4microbiome::parafac(milkMetab$data, nfac=3, nstart=100)
# saveRDS(modelMilkMetab, "./Models/PARAFAC/BMI_milkMetab.RDS")
modelMilkMetab = readRDS("./Models/PARAFAC/BMI_milkMetab.RDS")
modelFaeces$varExp
modelMilk$varExp
modelMilkMetab$varExp
milkMetab$data %>% dim
milkMetab$data[1:10,1:10,1]
modelMilkMetab$varExp
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(stringr)
library(parafac4microbiome)
library(NPLStoolbox)
Y = NPLStoolbox::Jakobsen2025$faeces$mode1$BMI
Ycnt = Y - mean(Y)
result = NPLStoolbox::ncrossreg(NPLStoolbox::Jakobsen2025$faeces$data, Ycnt)
faeces_NPLS = NPLStoolbox::triPLS1(NPLStoolbox::Jakobsen2025$faeces$data, Ycnt, 1)
saveRDS(faeces_NPLS, "./Models/NPLS/BMI_faeces_NPLS.RDS")
faeces_NPLS = readRDS("./Models/NPLS/BMI_faeces_NPLS.RDS")
faeces_NPLS = readRDS("./Models/NPLS/BMI_faeces_NPLS.RDS")
faeces_NPLS$varExpX
faeces_NPLS$varExpY
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(stringr)
library(parafac4microbiome)
library(CMTFtoolbox)
milkMetab_df_bmi = readRDS("./Data/BMI/milkMetab_homogenized.RDS")
milk_df_bmi = readRDS("./Data/BMI/milk_homogenized.RDS")
faeces_df_bmi = readRDS("./Data/BMI/faeces_homogenized.RDS")
homogenized_subjectMeta_bmi = readRDS("./Data/BMI/homogenized_subjectMeta.RDS")
faeces_taxonomy = readRDS("./Data/BMI/faeces_taxonomy.RDS")
faeces_df_bmi %>% dim
